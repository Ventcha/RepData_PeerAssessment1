plot(tidy1$interval[tidy1$aq == "weekday"],tidy1$aq[tidy1$aq == "weekday"],type ="l")
plot(tidy1$interval[tidy1$aq == "weekend"],tidy1$aq[tidy1$aq == "weekend"],type ="l")
plot(tidy1$interval[tidy1$aq == "weekday"],tidy1$aq[tidy1$aq == "weekday"],type ="l")
plot(tidy1$interval[tidy1$aq == "weekday"],tidy1$aq[tidy1$aq == "weekday"],type ="l")
plot(tidy1$interval[tidy1$aq == "weekend"],tidy1$aq[tidy1$aq == "weekend"],type ="l")
plot(tidy1$interval[tidy1$aq == "weekday"],tidy1$aq[tidy1$aq == "weekday"],type ="l")
plot(tidy1$interval[tidy1$aq == "weekend"],tidy1$impSteps[tidy1$aq == "weekend"],type ="l")
plot(tidy1$interval[tidy1$aq == "weekday"],tidy1$impSteps[tidy1$aq == "weekday"],type ="l")
wd = tidy1[tidy1$aq == "weekday",]
we = tidy1[tidy1$aq == "weekend",]
summary(wd)
summary(we)
wd = tidy1[tidy1$aq == "weekday",c(1,4)]
we = tidy1[tidy1$aq == "weekend",c(1,4)]
summary(wd)
summary(we)
wd = data.frame(tidy1)[tidy1$aq == "weekday",c(1,4)]
summary(wd)
we = data.frame(tidy1)[tidy1$aq == "weekend",c(1,4)]
summary(wd)
summary(we)
plot(we$interval,we$impSteps,type ="l")
plot(wd$interval,wd$impSteps,type ="l")
par(mfcol = c(1,1))
panel.smooth(we$interval,we$impSteps,type ="l")
library(lattice)
xyplot(impSteps ~ interval | aq, data = tidy1, layout = c(1, 2))
xyplot(impSteps ~ interval | aq, data = tidy1, layout = c(1, 2), type = "l")
setwd("~/Documents/coursera/Reproducible Research/RepData_peerassessment1")
fulldata = read.csv("activity.csv",header = T,stringsAsFactors = F)
fulldata$date = as.Date(fulldata$date)
sums = tapply(fulldata$steps,fulldata$date,sum, na.rm = T)
intervalDates = unique(data.frame(fulldata[,2]))
dailysums = data.frame(cbind(intervalDates,sums))
par(mfcol = c(1,1))
hist(dailysums$sums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
dailymean = round(mean(dailysums$sums, na.rm = T))
dailymedian = median(dailysums$sums, na.rm = T)
intervalsums = tapply(fulldata$steps,fulldata$interval,sum, na.rm = T)
bb = unique(data.frame(fulldata[,3]))
intervalcounts = data.frame(cbind(bb,intervalsums))
names(intervalcounts) = c("interval","sum")
plot(intervalcounts$interval,intervalcounts$sum,type ="l", xlab = "Interval", ylab = "Average Steps")
max(intervalcounts[,2])
library(plyr)
ndj = join(newdata,intervalcounts,by = "interval")#plyr join retains the first df order ;-)
newdata = fulldata
ndj = join(newdata,intervalcounts,by = "interval")#plyr join retains the first df order ;-)
ndj$impSteps = ndj$steps
for (ii in 1:length(ndj$impSteps)) {
if(is.na(ndj$impSteps[ii]))ndj$impSteps[ii] = ndj$sum[ii]
else ndj$impSteps[ii] = ndj$steps[ii]
}
for (ii in 1:length(ndj$impSteps)) {
if(is.na(ndj$impSteps[ii]))ndj$impSteps[ii] = ndj$sum[ii]
else ndj$impSteps[ii] = ndj$steps[ii]
}
imputedData = ndj[,c(2,3,5)]
newdata = fulldata
ndj = join(newdata,intervalcounts,by = "interval")#plyr join retains the first df order ;-)
ndj$impSteps = ndj$steps
View(ndj)
for (ii in 1:length(ndj$impSteps)) {
if(is.na(ndj$impSteps[ii]))ndj$impSteps[ii] = ndj$sum[ii]
else ndj$impSteps[ii] = ndj$steps[ii]
}
View(ndj)
imputedData = ndj[,c(2,3,5)]
rm(ndj, newdata)
dayType = sapply(imputedData$date,function(x) {if(weekdays(x) %in% c("Saturday","Sunday")) "weekend"
else "weekday"})
imputedData = cbind(imputedData,dayType)
View(imputedData)
summary(imputedData)
sum(imputedData$impSteps)
sum(fulldata$impSteps)
sum(fulldata$steps)
summary(fulldata$steps)
summary(imputedData$impSteps)
summary(fulldata)
summary(intervalsums)
intervalsums = tapply(fulldata$steps,fulldata$interval,mean, na.rm = T)
intervalcounts = data.frame(cbind(unique(data.frame(fulldata[,3])),intervalsums))
names(intervalcounts) = c("interval","sum")
plot(intervalcounts$interval,intervalcounts$sum,type ="l", xlab = "Interval", ylab = "Average Steps")
max(intervalcounts[,2])
intervalcounts[intervalcounts$sum == max(intervalcounts[,2]),]
intervalcounts[intervalcounts$sum == max(intervalcounts[,2]),]
maxsteps = intervalcounts[intervalcounts$sum == max(intervalcounts[,2]),]
maxsteps$interval
newdata = fulldata
ndj = join(newdata,intervalcounts,by = "interval")#plyr join retains the first df order ;-)
ndj$impSteps = ndj$steps
for (ii in 1:length(ndj$impSteps)) {
if(is.na(ndj$impSteps[ii]))ndj$impSteps[ii] = ndj$sum[ii]
else ndj$impSteps[ii] = ndj$steps[ii]
}
imputedData = ndj[,c(2,3,5)]
rm(ndj, newdata)
dayType = sapply(imputedData$date,function(x) {if(weekdays(x) %in% c("Saturday","Sunday")) "weekend"
else "weekday"})
imputedData = cbind(imputedData,dayType)
tidy1 = data.table(imputedData)[,lapply(.SD,mean,na.rm=TRUE), by = list(interval,dayType)]
library(lattice)
xyplot(impSteps ~ interval | dayType, data = tidy1, layout = c(1, 2), type = "l")
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
#```{r}
setwd("~/Documents/coursera/Reproducible Research/RepData_peerassessment1")
fulldata = read.csv("activity.csv",header = T,stringsAsFactors = F)
fulldata$date = as.Date(fulldata$date)
sums = tapply(fulldata$steps,fulldata$date,sum, na.rm = T)
intervalDates = unique(data.frame(fulldata[,2]))
dailysums = data.frame(cbind(intervalDates,sums))
#```
## What is mean total number of steps taken per day?
#```{r}
par(mfcol = c(1,1))
hist(dailysums$sums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
#```
#```{r , echo=FALSE}
dailymean = round(mean(dailysums$sums, na.rm = T))
dailymedian = median(dailysums$sums, na.rm = T)
#```
#Daily mean is `r dailymean` and median is `r dailymedian`
## What is the average daily activity pattern?
#```{r}
intervalsums = tapply(fulldata$steps,fulldata$interval,mean, na.rm = T)
intervalcounts = data.frame(cbind(unique(data.frame(fulldata[,3])),intervalsums))
names(intervalcounts) = c("interval","sum")
plot(intervalcounts$interval,intervalcounts$sum,type ="l", xlab = "Interval", ylab = "Average Steps")
#```
#```{r}
#Which 5-minute interval, on average across all the days in the dataset,
#contains the maximum number of steps?
maxsteps = intervalcounts[intervalcounts$sum == max(intervalcounts[,2]),]
maxsteps$interval
#```
## Imputing missing values
#```{r}
library(plyr)
newdata = fulldata
ndj = join(newdata,intervalcounts,by = "interval")#plyr join retains the first df order ;-)
ndj$impSteps = ndj$steps
#There must be a better way
for (ii in 1:length(ndj$impSteps)) {
if(is.na(ndj$impSteps[ii]))ndj$impSteps[ii] = ndj$sum[ii]
else ndj$impSteps[ii] = ndj$steps[ii]
}
imputedData = ndj[,c(2,3,5)]
rm(ndj, newdata)
#```
## Are there differences in activity patterns between weekdays and weekends?
#```{r}
#weekdays processing
dayType = sapply(imputedData$date,function(x) {if(weekdays(x) %in% c("Saturday","Sunday")) "weekend"
else "weekday"})
imputedData = cbind(imputedData,dayType)
#now perform a mean, with groupby, across all the observation columns
tidy1 = data.table(imputedData)[,lapply(.SD,mean,na.rm=TRUE), by = list(interval,dayType)]
library(lattice)
xyplot(impSteps ~ interval | dayType, data = tidy1, layout = c(1, 2), type = "l")
#```
rm(dailysums,fulldata,imputedData,intervalcounts,intervalsums, intervalDates, tidy1)
ls()
rm(list = ls())
summary(tidy1)
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
#```{r}
#CHANGE for specific working directory
setwd("~/Documents/coursera/Reproducible Research/RepData_peerassessment1")
# Assume the activity file is present as the unzipped csv
fulldata = read.csv("activity.csv",header = T,stringsAsFactors = F)
fulldata$date = as.Date(fulldata$date)
#calculate the sums per day, building a DF with Date and the Sum of steps for that date
sums = tapply(fulldata$steps,fulldata$date,sum, na.rm = T)
intervalDates = unique(data.frame(fulldata[,2]))
dailysums = data.frame(cbind(intervalDates,sums))
#```
## What is mean total number of steps taken per day?
#```{r}
par(mfcol = c(1,1)) #just in case: make it a single plot
hist(dailysums$sums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
#```
#```{r , echo=FALSE}
dailymean = round(mean(dailysums$sums, na.rm = T))
dailymedian = median(dailysums$sums, na.rm = T)
#```
#Daily mean is `r dailymean` and median is `r dailymedian`
## What is the average daily activity pattern?
#```{r}
#take the mean of the steps, by interval, ignoring the NA
intervalsums = tapply(fulldata$steps,fulldata$interval,mean, na.rm = T)
#create a DF binding with the unique interval values (these are repeated daily so there are 288 )
intervalcounts = data.frame(cbind(unique(data.frame(fulldata[,3])),intervalsums))
names(intervalcounts) = c("interval","sum")
#now show the plot of the average steps per interval
plot(intervalcounts$interval,intervalcounts$sum,type ="l", xlab = "Interval", ylab = "Average Steps")
#```
#```{r}
#Which 5-minute interval, on average across all the days in the dataset,
#contains the maximum number of steps?
maxsteps = intervalcounts[intervalcounts$sum == max(intervalcounts[,2]),]
maxsteps$interval
#```
## Imputing missing values
#```{r}
library(plyr)
#take a copy to work on
newdata = fulldata
#now merge in the interval average data joined across interval values, so we have a new column
ndj = join(newdata,intervalcounts,by = "interval")#plyr join retains the first df order ;-)
#initialise a new column to the value of steps. This column will be the one updated
ndj$impSteps = ndj$steps
#There must be a better way, than performing a loop
#This will replace any NA value of steps with the corresponding value for the average of that interval-steps
for (ii in 1:length(ndj$impSteps)) {
if(is.na(ndj$impSteps[ii]))ndj$impSteps[ii] = ndj$sum[ii]
else ndj$impSteps[ii] = ndj$steps[ii]
}
#extract the relevant column subsets into the imputed data.
imputedData = ndj[,c(2,3,5)]
sum(is.na(fulldata$steps))
intervalsums = tapply(imputedData$steps,imputedData$interval,mean, na.rm = T)
#create a DF binding with the unique interval values (these are repeated daily so there are 288 )
intervalcounts = data.frame(cbind(unique(data.frame(imputedData[,3])),intervalsums))
names(intervalcounts) = c("interval","sum")
#now show the plot of the average steps per interval
plot(intervalcounts$interval,intervalcounts$sum,type ="l", xlab = "Interval", ylab = "Average Steps")
maxsteps = intervalcounts[intervalcounts$sum == max(intervalcounts[,2]),]
maxsteps$interval
sums = tapply(imputedData$steps,imputedData$date,sum, na.rm = T)
intervalDates = unique(data.frame(imputedData[,2]))
dailysums = data.frame(cbind(intervalDates,sums))
par(mfcol = c(1,1)) #just in case: make it a single plot
hist(dailysums$sums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
dailymean = round(mean(dailysums$sums, na.rm = T))
dailymedian = median(dailysums$sums, na.rm = T)
daysteps = data.frame(c("Original Data",dailymean,dailymedian))
names(daysteps = c("Data Set","Mean","Median"))
names(daysteps) = c("Data Set","Mean","Median")
daysteps = data.frame("Original Data",dailymean,dailymedian)
names(daysteps) = c("Data Set","Mean","Median")
rbind(daysteps,c("Imputed Data",idailymean,idailymedian)
)
isums = tapply(imputedData$steps,imputedData$date,sum, na.rm = T)
#intervalDates = unique(data.frame(fulldata[,2]))
idailysums = data.frame(cbind(intervalDates,isums))
par(mfcol = c(1,1)) #just in case: make it a single plot
hist(idailysums$sums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
idailymean = round(mean(idailysums$sums, na.rm = T))
idailymedian = median(idailysums$sums, na.rm = T)
isums = tapply(imputedData$sum,imputedData$date,sum, na.rm = T)
isums = tapply(imputedData$impSteps,imputedData$date,sum, na.rm = T)
idailysums = data.frame(cbind(intervalDates,isums))
intervalDates = unique(data.frame(fulldata[,2]))
idailysums = data.frame(cbind(intervalDates,isums))
par(mfcol = c(1,1)) #just in case: make it a single plot
hist(idailysums$sums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
hist(idailysums$isums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
idailymean = round(mean(idailysums$sums, na.rm = T))
idailymedian = median(idailysums$sums, na.rm = T)
idailymean = round(mean(idailysums$isums, na.rm = T))
idailymedian = median(idailysums$isums, na.rm = T)
rbind(daysteps,c("Imputed Data",idailymean,idailymedian))
names(daysteps) = c("DataSet","Mean","Median")
daysteps$DataSet = as.character(daysteps$DataSet)
rbind(daysteps,c("Imputed Data",idailymean,idailymedian))
summary(idailysums)
idailymedian = round(median(idailysums$isums, na.rm = T))
daysteps$DataSet = as.character(daysteps$DataSet)
rbind(daysteps,c("Imputed Data",idailymean,idailymedian))
daysteps
rbind(daysteps,c("Imputed Data",idailymean,idailymedian))
daysteps
daysteps[]
rbind(daysteps,c("Imputed Data",idailymean,idailymedian))
rm(list = ls())
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
#```{r}
#CHANGE for specific working directory
setwd("~/Documents/coursera/Reproducible Research/RepData_peerassessment1")
# Assume the activity file is present as the unzipped csv
fulldata = read.csv("activity.csv",header = T,stringsAsFactors = F)
fulldata$date = as.Date(fulldata$date)
#calculate the sums per day, building a DF with Date and the Sum of steps for that date
sums = tapply(fulldata$steps,fulldata$date,sum, na.rm = T)
intervalDates = unique(data.frame(fulldata[,2]))
dailysums = data.frame(cbind(intervalDates,sums))
#```
## What is mean total number of steps taken per day?
#```{r}
par(mfcol = c(1,1)) #just in case: make it a single plot
hist(dailysums$sums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
#```
#```{r , echo=FALSE}
dailymean = round(mean(dailysums$sums, na.rm = T))
dailymedian = median(dailysums$sums, na.rm = T)
daysteps = data.frame("Original Data",dailymean,dailymedian)
names(daysteps) = c("DataSet","Mean","Median")
#```
#Daily mean is `r dailymean` and median is `r dailymedian`
## What is the average daily activity pattern?
#```{r}
#take the mean of the steps, by interval, ignoring the NA
intervalsums = tapply(fulldata$steps,fulldata$interval,mean, na.rm = T)
#create a DF binding with the unique interval values (these are repeated daily so there are 288 )
intervalcounts = data.frame(cbind(unique(data.frame(fulldata[,3])),intervalsums))
names(intervalcounts) = c("interval","sum")
#now show the plot of the average steps per interval
plot(intervalcounts$interval,intervalcounts$sum,type ="l", xlab = "Interval", ylab = "Average Steps")
#```
#```{r}
#Which 5-minute interval, on average across all the days in the dataset,
#contains the maximum number of steps?
maxsteps = intervalcounts[intervalcounts$sum == max(intervalcounts[,2]),]
maxsteps$interval
#```
## Imputing missing values
#```{r}
library(plyr)
#take a copy to work on
newdata = fulldata
#now merge in the interval average data joined across interval values, so we have a new column
ndj = join(newdata,intervalcounts,by = "interval")#plyr join retains the first df order ;-)
#initialise a new column to the value of steps. This column will be the one updated
ndj$impSteps = ndj$steps
#There must be a better way, than performing a loop
#This will replace any NA value of steps with the corresponding value for the average of that interval-steps
for (ii in 1:length(ndj$impSteps)) {
if(is.na(ndj$impSteps[ii]))ndj$impSteps[ii] = ndj$sum[ii]
else ndj$impSteps[ii] = ndj$steps[ii]
}
#extract the relevant column subsets into the imputed data.
imputedData = ndj[,c(2,3,5)]
sum(is.na(fulldata$steps))
rm(ndj, newdata) #remove some temp variables
isums = tapply(imputedData$impSteps,imputedData$date,sum, na.rm = T)
idailysums = data.frame(cbind(intervalDates,isums))
par(mfcol = c(1,1)) #just in case: make it a single plot
hist(idailysums$isums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
hist(idailysums$isums, breaks = 12,xlab="Daily Step Total",main = "Daily Steps")
hist(idailysums$isums, breaks = 15,xlab="Daily Step Total",main = "Daily Steps")
hist(idailysums$isums, breaks = 20,xlab="Daily Step Total",main = "Daily Steps")
hist(idailysums$isums, breaks = 18,xlab="Daily Step Total",main = "Daily Steps")
hist(idailysums$isums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
summary(idailysums)
idailymean = round(mean(idailysums$isums, na.rm = T))
idailymedian = round(median(idailysums$isums, na.rm = T))
daysteps$DataSet = as.character(daysteps$DataSet)
rbind(daysteps,c("Imputed Data",idailymean,idailymedian))
daysteps = rbind(daysteps,c("Imputed Data",idailymean,idailymedian))
daysteps
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
#```{r}
#CHANGE for specific working directory
setwd("~/Documents/coursera/Reproducible Research/RepData_peerassessment1")
# Assume the activity file is present as the unzipped csv
fulldata = read.csv("activity.csv",header = T,stringsAsFactors = F)
fulldata$date = as.Date(fulldata$date)
#calculate the sums per day, building a DF with Date and the Sum of steps for that date
sums = tapply(fulldata$steps,fulldata$date,sum, na.rm = T)
intervalDates = unique(data.frame(fulldata[,2]))
dailysums = data.frame(cbind(intervalDates,sums))
#```
## What is mean total number of steps taken per day?
#```{r}
par(mfcol = c(1,1)) #just in case: make it a single plot
hist(dailysums$sums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
#```
#```{r , echo=FALSE}
dailymean = round(mean(dailysums$sums, na.rm = T))
dailymedian = median(dailysums$sums, na.rm = T)
daysteps = data.frame("Original Data",dailymean,dailymedian)
names(daysteps) = c("DataSet","Mean","Median")
#```
#Daily mean is `r dailymean` and median is `r dailymedian`
## What is the average daily activity pattern?
#```{r}
#take the mean of the steps, by interval, ignoring the NA
intervalsums = tapply(fulldata$steps,fulldata$interval,mean, na.rm = T)
#create a DF binding with the unique interval values (these are repeated daily so there are 288 )
intervalcounts = data.frame(cbind(unique(data.frame(fulldata[,3])),intervalsums))
names(intervalcounts) = c("interval","sum")
#now show the plot of the average steps per interval
plot(intervalcounts$interval,intervalcounts$sum,type ="l", xlab = "Interval", ylab = "Average Steps")
#```
#```{r}
#Which 5-minute interval, on average across all the days in the dataset,
#contains the maximum number of steps?
maxsteps = intervalcounts[intervalcounts$sum == max(intervalcounts[,2]),]
maxsteps$interval
#```
## Imputing missing values
#```{r}
library(plyr)
#take a copy to work on
newdata = fulldata
#now merge in the interval average data joined across interval values, so we have a new column
ndj = join(newdata,intervalcounts,by = "interval")#plyr join retains the first df order ;-)
#initialise a new column to the value of steps. This column will be the one updated
ndj$impSteps = ndj$steps
#There must be a better way, than performing a loop
#This will replace any NA value of steps with the corresponding value for the average of that interval-steps
for (ii in 1:length(ndj$impSteps)) {
if(is.na(ndj$impSteps[ii]))ndj$impSteps[ii] = ndj$sum[ii]
else ndj$impSteps[ii] = ndj$steps[ii]
}
#extract the relevant column subsets into the imputed data.
imputedData = ndj[,c(2,3,5)]
sum(is.na(fulldata$steps))
rm(ndj, newdata) #remove some temp variables
#```
isums = tapply(imputedData$impSteps,imputedData$date,sum, na.rm = T)
#intervalDates = unique(data.frame(fulldata[,2]))
idailysums = data.frame(cbind(intervalDates,isums))
par(mfcol = c(1,1)) #just in case: make it a single plot
hist(idailysums$isums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
summary(idailysums)
idailymean = round(mean(idailysums$isums, na.rm = T))
idailymedian = round(median(idailysums$isums, na.rm = T))
daysteps$DataSet = as.character(daysteps$DataSet)
daysteps = rbind(daysteps,c("Imputed Data",idailymean,idailymedian))
daysteps
## Are there differences in activity patterns between weekdays and weekends?
#```{r}
#weekdays processing
#build a list of the values of "weekend" or "weekday" for each record
dayType = sapply(imputedData$date,function(x) {if(weekdays(x) %in% c("Saturday","Sunday")) "weekend"
else "weekday"})
#bind this in, so the data now has date, interval,steps(imputed) and the new factor value
imputedData = cbind(imputedData,dayType)
#now perform a mean of Steps, with groupby across interval and daytype, across all the data
tidy1 = data.table(imputedData)[,lapply(.SD,mean,na.rm=TRUE), by = list(interval,dayType)]
library(lattice)
#plot as a basic panel plot
xyplot(impSteps ~ interval | dayType, data = tidy1, layout = c(1, 2), type = "l")
#```
summary(tidy1)
#```{r}
#cleanup
#    rm(list = ls())
#```
rm(list = ls())
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
#```{r}
#CHANGE for specific working directory
setwd("~/Documents/coursera/Reproducible Research/RepData_peerassessment1")
# Assume the activity file is present as the unzipped csv
fulldata = read.csv("activity.csv",header = T,stringsAsFactors = F)
fulldata$date = as.Date(fulldata$date)
#calculate the sums per day, building a DF with Date and the Sum of steps for that date
sums = tapply(fulldata$steps,fulldata$date,sum, na.rm = T)
intervalDates = unique(data.frame(fulldata[,2]))
dailysums = data.frame(cbind(intervalDates,sums))
#```
## What is mean total number of steps taken per day?
#```{r}
par(mfcol = c(1,1)) #just in case: make it a single plot
hist(dailysums$sums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
#```
#```{r , echo=FALSE}
dailymean = round(mean(dailysums$sums, na.rm = T))
dailymedian = median(dailysums$sums, na.rm = T)
daysteps = data.frame("Original Data",dailymean,dailymedian)
names(daysteps) = c("DataSet","Mean","Median")
#```
#Daily mean is `r dailymean` and median is `r dailymedian`
## What is the average daily activity pattern?
#```{r}
#take the mean of the steps, by interval, ignoring the NA
intervalsums = tapply(fulldata$steps,fulldata$interval,mean, na.rm = T)
#create a DF binding with the unique interval values (these are repeated daily so there are 288 )
intervalcounts = data.frame(cbind(unique(data.frame(fulldata[,3])),intervalsums))
names(intervalcounts) = c("interval","sum")
#now show the plot of the average steps per interval
plot(intervalcounts$interval,intervalcounts$sum,type ="l", main = "Daily Average Steps by Interval", xlab = "Interval", ylab = "Average Steps")
#```
maxsteps = intervalcounts[intervalcounts$sum == max(intervalcounts[,2]),]
maxsteps$interval
library(plyr)
#take a copy to work on
newdata = fulldata
#now merge in the interval average data joined across interval values, so we have a new column
ndj = join(newdata,intervalcounts,by = "interval")#plyr join retains the first df order ;-)
#initialise a new column to the value of steps. This column will be the one updated
ndj$impSteps = ndj$steps
#There must be a better way, than performing a loop
#This will replace any NA value of steps with the corresponding value for the average of that interval-steps
for (ii in 1:length(ndj$impSteps)) {
if(is.na(ndj$impSteps[ii]))ndj$impSteps[ii] = ndj$sum[ii]
else ndj$impSteps[ii] = ndj$steps[ii]
}
#extract the relevant column subsets into the imputed data.
imputedData = ndj[,c(2,3,5)]
sum(is.na(fulldata$steps))
rm(ndj, newdata) #remove some temp variables
isums = tapply(imputedData$impSteps,imputedData$date,sum, na.rm = T)
#intervalDates = unique(data.frame(fulldata[,2]))
idailysums = data.frame(cbind(intervalDates,isums))
par(mfcol = c(1,1)) #just in case: make it a single plot
hist(idailysums$isums, breaks = 10,xlab="Daily Step Total",main = "Daily Steps")
summary(idailysums)
idailymean = round(mean(idailysums$isums, na.rm = T))
idailymedian = round(median(idailysums$isums, na.rm = T))
daysteps$DataSet = as.character(daysteps$DataSet)
daysteps = rbind(daysteps,c("Imputed Data",idailymean,idailymedian))
source('~/.active-rstudio-document', echo=TRUE)
